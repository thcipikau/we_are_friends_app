//This is autogenerated file. All changes will be lost after code generation.
import 'package:nsg_data/nsg_data.dart';
// ignore: unused_import
import 'dart:typed_data';
import '../data_controller_model.dart';

/// Мероприятия
class EventGenerated extends NsgDataItem {
  static const nameId = 'id';
  static const nameDate = 'date';
  static const nameName = 'name';
  static const nameComment = 'comment';
  static const nameEventGroupId = 'eventGroupId';
  static const nameSumNeeded = 'sumNeeded';
  static const nameSumActual = 'sumActual';
  static const nameSumRaised = 'sumRaised';
  static const nameUserId = 'userId';
  static const nameFriendTable = 'friendTable';
  static const namePhotoTable = 'photoTable';
  static const nameIsFinished = 'isFinished';
  static const nameFinishDate = 'finishDate';
  static const nameBudgetTable = 'budgetTable';

  static final Map<String, String> fieldNameDict = {
   nameEventGroupId: 'Группа мероприятий',
 };

  @override
  String get typeName => 'Event';

  @override
  void initialize() {
    addField(NsgDataStringField(nameId), primaryKey: true);
    addField(NsgDataDateField(nameDate), primaryKey: false);
    addField(NsgDataStringField(nameName), primaryKey: false);
    addField(NsgDataStringField(nameComment, maxLength: 0), primaryKey: false);
    addField(NsgDataReferenceField<EventGroup>(nameEventGroupId), primaryKey: false);
    addField(NsgDataDoubleField(nameSumNeeded), primaryKey: false);
    addField(NsgDataDoubleField(nameSumActual), primaryKey: false);
    addField(NsgDataDoubleField(nameSumRaised), primaryKey: false);
    addField(NsgDataStringField(nameUserId), primaryKey: false);
    addField(NsgDataReferenceListField<EventFriendTable>(nameFriendTable), primaryKey: false);
    addField(NsgDataReferenceListField<EventPhotoTable>(namePhotoTable), primaryKey: false);
    addField(NsgDataBoolField(nameIsFinished), primaryKey: false);
    addField(NsgDataDateField(nameFinishDate), primaryKey: false);
    addField(NsgDataReferenceListField<EventBudgetTable>(nameBudgetTable), primaryKey: false);
    fieldList.fields[nameEventGroupId]?.presentation = 'Группа мероприятий';
  }

  @override
  String toString() => name;

  @override
  NsgDataItem getNewObject() => Event();

  /// Идентификатор
  @override
  String get id => getFieldValue(nameId).toString();

  @override
  set id(String value) => setFieldValue(nameId, value);

  /// Дата
  DateTime get date => getFieldValue(nameDate) as DateTime;

  set date(DateTime value) => setFieldValue(nameDate, value);

  /// Наименование
  String get name => getFieldValue(nameName).toString();

  set name(String value) => setFieldValue(nameName, value);

  /// Комментарий
  String get comment => getFieldValue(nameComment).toString();

  set comment(String value) => setFieldValue(nameComment, value);

  /// ГруппаМероприятий
  String get eventGroupId => getFieldValue(nameEventGroupId).toString();
  EventGroup get eventGroup => getReferent<EventGroup>(nameEventGroupId);
  Future<EventGroup> eventGroupAsync() async {
   return await getReferentAsync<EventGroup>(nameEventGroupId);
  }

  set eventGroupId(String value) => setFieldValue(nameEventGroupId, value);
  set eventGroup(EventGroup value) =>
    setFieldValue(nameEventGroupId, value.id);

  /// НеобходимаяСумма
  double get sumNeeded => getFieldValue(nameSumNeeded) as double;

  set sumNeeded(double value) => setFieldValue(nameSumNeeded, value);

  /// ФактическаяСумма
  double get sumActual => getFieldValue(nameSumActual) as double;

  set sumActual(double value) => setFieldValue(nameSumActual, value);

  /// СобраннаяСумма
  double get sumRaised => getFieldValue(nameSumRaised) as double;

  set sumRaised(double value) => setFieldValue(nameSumRaised, value);

  /// Пользователь
  String get userId => getFieldValue(nameUserId).toString();

  set userId(String value) => setFieldValue(nameUserId, value);

  /// ТаблицаУчастники
  NsgDataTable<EventFriendTable> get friendTable => NsgDataTable<EventFriendTable>(owner: this, fieldName: nameFriendTable);


  NsgDataTable<EventPhotoTable> get photoTable => NsgDataTable<EventPhotoTable>(owner: this, fieldName: namePhotoTable);


  /// Завершено
  bool get isFinished => getFieldValue(nameIsFinished) as bool;

  set isFinished(bool value) => setFieldValue(nameIsFinished, value);

  DateTime get finishDate => getFieldValue(nameFinishDate) as DateTime;

  set finishDate(DateTime value) => setFieldValue(nameFinishDate, value);

  NsgDataTable<EventBudgetTable> get budgetTable => NsgDataTable<EventBudgetTable>(owner: this, fieldName: nameBudgetTable);


  @override
  String get apiRequestItems {
    return '/Api/Event';
  }
}
